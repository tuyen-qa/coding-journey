class DSU{ constructor(n){ this.p=Array.from({length:n},(_,i)=>i); this.r=Array(n).fill(0); this.c=n;} find(x){ return this.p[x]===x? x: (this.p[x]=this.find(this.p[x])); } union(a,b){ a=this.find(a); b=this.find(b); if(a===b) return false; if(this.r[a]<this.r[b]) [a,b]=[b,a]; this.p[b]=a; if(this.r[a]===this.r[b]) this.r[a]++; this.c--; return true; } } export function countComponents(n,edges){ const d=new DSU(n); for(const [u,v] of edges) d.union(u,v); return d.c;}